load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@gazelle//:def.bzl", "gazelle")
load("@npm//:defs.bzl", "npm_link_all_packages")

exports_files([
    ".swcrc",
    "tsconfig.json",
    "jest.config.json",
    "package.json",
    "swc.config.json",
])

# gazelle:prefix github.com/publiclabel/monorepo
gazelle(name = "gazelle")

# gazelle:exclude bazel-out
# gazelle:exclude bazel-bin
# gazelle:exclude bazel-monorepo
# gazelle:exclude bazel-testlogs
# gazelle:exclude external
# gazelle:exclude bazel/go/scripts/lib
#
# gazelle:map_kind go_binary go_binary //bazel/go:exports.bzl
# gazelle:map_kind go_library go_library //bazel/go:exports.bzl
# gazelle:map_kind go_test go_test //bazel/go:exports.bzl

# Here's a typical workflow:
#
# 1. Modify the `go.mod` file to add or remove dependencies.
# 2. Run `bazel run //:gazelle-update-repos` to update the `deps.bzl` file.
# 3. Run `bazel run //:gazelle` to update the BUILD.bazel files.
#
# This workflow ensures that your Bazel build files are always up-to-date with your Go dependencies.
gazelle(
    name = "gazelle-update-repos",
    args = [
        "-from_file=go.mod",
        "-to_macro=deps.bzl%go_dependencies",
        "-prune",
    ],
    command = "update-repos",
)

ts_config(
    name = "tsconfig_root",
    src = "tsconfig.json",
    visibility = [":__subpackages__"],
)

ts_config(
    name = "tsconfig_svelte",
    src = "tsconfig.svelte.json",
    visibility = [":__subpackages__"],
)

npm_link_all_packages(
    name = "node_modules",
)

buildifier(
    name = "buildifier",
)
