load(
  "@rules_pkg//:pkg.bzl",
  "pkg_tar",
)
load(
  "@rules_oci//oci:defs.bzl",
  "oci_image",
  "oci_tarball",
)
load(
  "//bazel/image/server_image_test:server_image_test.bzl",
  "server_image_test",
)

"""
server_image_package(name, expected_response, endpoint, tar_path_root, port, platform_targets)

Macro that generates a set of rules to package a server application into an OCI image and optionally test it.

Args:
    name (string): A base name for the generated rules. The names of the generated rules will be based on this name.
    expected_response (string): The expected response from the server when it is tested.
    endpoint (string): The endpoint to test the server.
    tar_path_root (string): The root path for the tarball generated by the oci_tarball rule.
    port (int): The port to test the server.
    platform_targets (list of dicts): A list of dictionaries, each representing a platform target. Each dictionary should have the following keys:
        - "platform" (string): The platform for the target.
        - "target" (label): The target that produces the application to be included in the OCI image.
        - "entrypoint" (list of strings): The entrypoint for the OCI image.
        - "base" (string): The base image for the OCI image.
        - "create_test" (bool): Whether to create a server_image_test rule for the target.

Generated rules:
    pkg_tar: Packages the application into a tarball. The label of the rule is `:<name>_tar_<platform>`.
    oci_image: Builds an OCI image that includes the application. The label of the rule is `:<name>_image_<platform>`.
    oci_tarball: Packages the OCI image into a tarball. The label of the rule is `:<name>_tarball_<platform>`.
    server_image_test: Tests the server application (optional, created if "create_test" is True). The label of the rule is `:<name>_test_<platform>`.

Example:
    server_image_package(
        name = "my_server",
        expected_response = "Hello, world!",
        endpoint = "/",
        tar_path_root = "/path/to/tar",
        port = 8080,
        platform_targets = [
            {
                "platform": "linux/amd64",
                "target": ":bin_amd64",
                "entrypoint": ["/bin_amd64"],
                "base": "@distroless_base_linux_amd64",
                "create_test": True,
            },
            {
                "platform": "linux/arm64",
                "target": ":bin_arm64",
                "entrypoint": ["/bin_arm64"],
                "base": "@distroless_base_linux_arm64",
                "create_test": False,
            },
        ],
    )
In this example, the server_image_package macro generates a set of rules to package the :bin_amd64 and :bin_arm64 targets into OCI images, and then test the :bin_amd64 server application.
"""
def server_image_package(name, expected_response, endpoint, tar_path_root, port, platform_targets):
    for platform_target in platform_targets:
        platform = platform_target["platform"].replace("/", "_")
        target = platform_target["target"]
        entrypoint = platform_target["entrypoint"]
        base = platform_target["base"]
        create_test = platform_target["create_test"]

        pkg_tar(
            name = "%s_tar_%s" % (name, platform),
            srcs = [target],
        )

        oci_image(
            name = "%s_image_%s" % (name, platform),
            base = base,
            entrypoint = entrypoint,
            tars = [":%s_tar_%s" % (name, platform)],
            visibility = ["//visibility:public"],
        )

        oci_tarball(
            name = "%s_tarball_%s" % (name, platform),
            image = ":%s_image_%s" % (name, platform),
            repo_tags = ["%s:latest" % name],
        )

        if create_test:
          server_image_test(
              name = "%s_test_%s" % (name, platform),
              bazel_target = ":%s_tarball_%s" % (name, platform),
              docker_tag = "%s:latest" % name,
              expected_response = expected_response,
              endpoint = endpoint,
              tar_path = "{}/{}_tarball_{}/tarball.tar".format(tar_path_root, name, platform),
              port = port,
          )
