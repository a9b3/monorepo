load("//bazel/go:exports.bzl", "go_binary", "go_library", "go_test")
load("//bazel/image:exports.bzl", "oci_image", "oci_tarball", "pkg_tar")

go_library(
    name = "go-image_lib",
    srcs = ["main.go"],
    importpath = "github.com/publiclabel/monorepo/bazel/go/examples/go-image",
    visibility = ["//visibility:private"],
)

go_test(
    name = "go-image_test",
    srcs = ["main_test.go"],
    embed = [":go-image_lib"],
)

go_binary(
    name = "app",
    embed = [":go-image_lib"],
    #  These are required to be able to run the executable in the oci_image
    #  below. But this will make it not possible to bazel run this in arm64.
    # goarch = "amd64",
    # goos = "linux",
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "tar",
    srcs = [":app"],
)

oci_image(
    name = "image",
    base = "@distroless_base",
    entrypoint = ["/app"],
    tars = [":tar"],
    visibility = ["//visibility:public"],
)

# https://github.com/moby/moby/issues/47517
#
# bazel build //bazel/go/examples/go-image:tarball --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
# tar -xvf $(bazel cquery --output=files //bazel/go/examples/go-image:tarball) -C /tmp/foo
# (cd /tmp/foo && tar --no-xattr -cvf /tmp/footar.tar . )
# docker load --input /tmp/footar.tar
# docker run --rm example-go-image:latest
#
# or (it should run the following way but because of the issue above it doesn't)
#
# bazel build //bazel/go/examples/go-image:tarball
# docker load --input $(bazel cquery --output=files //bazel/go/examples/go-image:tarball)
# docker run --rm example-go-image:latest
oci_tarball(
    name = "tarball",
    image = ":image",
    repo_tags = ["example-go-image:latest"],
)

sh_test(
    name = "image_test",
    srcs = ["image_test.sh"],
    data = [":tarball"],
)

