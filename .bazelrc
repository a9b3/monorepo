# Cache outputs to local disk
build --disk_cache=~/.cache/bazel-disk-cache

# Required by rules swc
# https://docs.aspect.build/aspect-build/rules_swc/v0.4.0/readme
# also specified here
# https://github.com/bazelbuild/rules_nodejs/tree/stable/examples/jest
build --enable_runfiles
run --enable_runfiles
test --enable_runfiles

# Set bzlmod which uses MODULE.bazel to set workspace dependencies instead of
# the WORKSPACE file.
common --enable_bzlmod

# Remove all extraneous bazel logs when running bazel commands
# common --ui_event_filters=-info,-stdout,-stderr,-debug,-warning --noshow_progress

build --experimental_allow_unresolved_symlinks
run --experimental_allow_unresolved_symlinks
test --experimental_allow_unresolved_symlinks

test --test_output=all

# ensure that tags applied in your BUILD file, like tags = ["no-remote"] get
# propagated to actions created by the rule. Without this option, you rely on
# rules authors to manually check the tags you passed and apply relevant ones
# to the actions they create.
# See https://github.com/bazelbuild/bazel/issues/7766
build --incompatible_allow_tags_propagation

# TypeScript's type-checking exposes a flag `--skipLibCheck`:
# https://www.typescriptlang.org/tsconfig#skipLibCheck
#
# Using this flag saves substantial time during type-checking.
# Rather than doing a full check of all d.ts files, TypeScript will only type-check the code you
# specifically refer to in your app's source code.
# We recommend this for most rules_ts users.
#
# HOWEVER this performance improvement comes at the expense of type-system accuracy.
# For example, two packages could define two copies of the same type in an inconsistent way.
# If you publish a library from your repository, your incorrect types may result in errors for your users.
common --@aspect_rules_ts//ts:skipLibCheck=always
